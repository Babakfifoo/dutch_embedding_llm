# %%
import json
from tqdm import tqdm
import logging
from tools import promptTools
from tools.prompts import noDCP, WhyNoDCP, DCPMade
from tools.promptsDirect import DCP_direct
from ollama import ChatResponse
from typing import List, Dict, Any

logging.basicConfig(
    filename="./logs/D02.log",
    encoding="utf-8",
    level=logging.INFO,
    format="%(asctime)s:%(levelname)s:%(message)s",
)


# %%

## LOADING FEASIBILITY TEXTS.
FEAS_TEXT: str = (
    "../data/plan_documents/Dashboard_outputs/D02_validated_feasability_section.json"
)
# Loading the context information
with open(file=FEAS_TEXT, mode="r", encoding="utf-8") as f:
    texts = json.loads(f.read())
CONTEXTS_COUNT: int = len(texts.keys())


# %%

# identifying the existing prompts.
# ATTENTION: renew the file if you are re-running the prompting from scratch!
# Make it a database recording with semi-structured data (SQLite + JSON)
if False:
    DCP_detection_result: List[Any] = []
    OUTPUT: str = "../data/Answers/DCP_detection.json"
    for i, (imro, plan) in tqdm(
        iterable=enumerate(iterable=texts.items()), total=CONTEXTS_COUNT
    ):
        entry: Dict[str, Any] = {
            "imro": imro,
            "noDCP": None,
            "DCPMade": None,
            "WhyNoDCP": None,
        }
        if plan["feasability text"].lower() == "":
            continue
        if promptTools.find_topic(
            s=plan["feasability text"].lower(),
            q=noDCP.term_queries,
            threshold=noDCP.threshold,
        ):
            answer: ChatResponse = promptTools.ask_LLM(
                context=plan["feasability text"], prompt=noDCP.prompt
            )
            entry["noDCP"] = promptTools.bool_cleaner(s=answer["message"]["content"])

            if not entry["noDCP"]:
                answer: ChatResponse = promptTools.ask_LLM(
                    context=plan["feasability text"], prompt=DCPMade.prompt
                )
                entry["DCPMade"] = promptTools.bool_cleaner(
                    s=answer["message"]["content"]
                )

                if entry["DCPMade"]:
                    answer: ChatResponse = promptTools.ask_LLM(
                        context=plan["feasability text"],
                        prompt=WhyNoDCP.prompt,
                        response_format="json",
                    )

                    entry["WhyNoDCP"] = answer["message"]["content"]

        DCP_detection_result.append(entry)

        if (i + 1) % 10 == 0:
            with open(file=OUTPUT, mode="w", encoding="utf-8") as f:
                f.write(json.dumps(DCP_detection_result, indent=4))
# %%
